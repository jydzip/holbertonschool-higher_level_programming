================================
The ``2-matrix_divided`` module
================================

Using ``matrix_divided``, for list matrix.


Lists
=====

``matrix_divided`` divides all elements of a matrix.

::

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]

	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

	>>> matrix = [
	...    	[7, 8],
	...     [9, 10]
	... ]
	>>> matrix_divided(matrix, 2)
	[[3.5, 4.0], [4.5, 5.0]]

	>>> matrix = [
	...     [10, 20, 30],
	...     [40, 50, 60]
	... ]
	>>> matrix_divided(matrix, 10)
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

	>>> matrix = [
	...     [1.5, 2.5, 3.5],
	...     [4.5, 5.5, 6.5]
	... ]
	>>> matrix_divided(matrix, 2)
	[[0.75, 1.25, 1.75], [2.25, 2.75, 3.25]]

	>>> matrix = [
        ...     [10, 20, 30],
        ...     [1.33, 3.74, 6.89],
	...	[-8, -9.71, 0]
        ... ]
        >>> matrix_divided(matrix, 5.3)
        [[1.89, 3.77, 5.66], [0.25, 0.71, 1.3], [-1.51, -1.83, 0.0]]

	>>> matrix = [
        ...     [-1, 3.1, 0],
        ...     [78, -103.7, 54]
        ... ]
        >>> matrix_divided(matrix, 9.2)
        [[-0.11, 0.34, 0.0], [8.48, -11.27, 5.87]]


Errors
======

``matrix`` must be of the same size.

::

	>>> matrix = [
	...     [1, 2],
	...     [3, 4, 5]
	... ]
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
    		...
	TypeError: Each row of the matrix must have the same size

``matrix`` must be a lists of integers or floats.

::

	>>> matrix = [
	...     ["Hello", "World"],
	...     ["Holberton", "World"]
	... ]
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
	    ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [
        ...     ["1", "5"],
        ...     ["2", "10"]
        ... ]
        >>> matrix_divided(matrix, 6)
        Traceback (most recent call last):
            ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([], 10)
        Traceback (most recent call last):
            ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided((1, 2, 3), 3)
        Traceback (most recent call last):
            ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

```div`` must be a integer and not equal to 0.

::

	>>> matrix = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> matrix_divided(matrix, "2")
	Traceback (most recent call last):
	    ...
	TypeError: div must be a number

	>>> matrix_divided(matrix, [2])
        Traceback (most recent call last):
            ...
        TypeError: div must be a number

	>>> matrix = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	    ...
	ZeroDivisionError: division by zero

Tests others

::

	>>> matrix = [[1, 2, 3],[4, 5, 6]]
	>>> matrix_divided(matrix, float('inf'), 5)
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() takes 2 positional arguments but 3 were given

	>>> matrix = [[1, 2, 3],[4, 5, 6]]
	>>> matrix_divided(matrix, float('nan'), 0)
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() takes 2 positional arguments but 3 were given